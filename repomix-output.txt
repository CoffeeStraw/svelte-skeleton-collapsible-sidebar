This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-18T22:52:14.661Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
.npmrc
LICENSE
package.json
README.md
src/app.d.ts
src/app.html
src/lib/CollapsibleSidebar.svelte
src/lib/index.ts
src/routes/+page.svelte
svelte.config.js
tsconfig.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: .gitignore
================
node_modules

# Output
.output
.vercel
.netlify
.wrangler
/.svelte-kit
/build
/dist

# OS
.DS_Store
Thumbs.db

# Env
.env
.env.*
!.env.example
!.env.test

# Vite
vite.config.js.timestamp-*
vite.config.ts.timestamp-*

================
File: .npmrc
================
engine-strict=true

================
File: LICENSE
================
MIT License

Copyright (c) 2024 CoffeeStraw

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: package.json
================
{
	"name": "svelte-skeleton-collapsible-sidebar",
	"version": "1.0.0",
	"description": "Plug-n-play collapsible Sidebar for Svelte 5 and Skeleton UI",
	"homepage": "https://github.com/CoffeeStraw/svelte-skeleton-collapsible-sidebar",
	"bugs": {
		"url": "https://github.com/CoffeeStraw/svelte-skeleton-collapsible-sidebar/issues"
	},
	"repository": {
		"type": "git",
		"url": "git+https://github.com/CoffeeStraw/svelte-skeleton-collapsible-sidebar.git"
	},
	"keywords": [
		"svelte",
		"component",
		"collapsible",
		"sidebar"
	],
	"author": "CoffeeStraw",
	"license": "MIT",
	"scripts": {
		"dev": "vite dev",
		"build": "vite build && npm run package",
		"preview": "vite preview",
		"package": "svelte-kit sync && svelte-package && publint",
		"prepublishOnly": "npm run package",
		"check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
		"check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch"
	},
	"files": [
		"dist",
		"!dist/**/*.test.*",
		"!dist/**/*.spec.*"
	],
	"sideEffects": [
		"**/*.css"
	],
	"svelte": "./dist/index.js",
	"types": "./dist/index.d.ts",
	"type": "module",
	"exports": {
		".": {
			"types": "./dist/index.d.ts",
			"svelte": "./dist/index.js"
		}
	},
	"peerDependencies": {
		"svelte": "^5.0.0"
	},
	"devDependencies": {
		"@sveltejs/adapter-auto": "^3.0.0",
		"@sveltejs/kit": "^2.9.0",
		"@sveltejs/package": "^2.0.0",
		"@sveltejs/vite-plugin-svelte": "^5.0.0",
		"publint": "^0.2.0",
		"svelte": "^5.0.0",
		"svelte-check": "^4.0.0",
		"typescript": "^5.0.0",
		"vite": "^6.0.0"
	},
	"packageManager": "yarn@1.22.22+sha512.a6b2f7906b721bba3d67d4aff083df04dad64c399707841b7acf00f6b133b7ac24255f2652fa22ae3534329dc6180534e98d17432037ff6fd140556e2bb3137e"
}

================
File: README.md
================
# create-svelte

Everything you need to build a Svelte library, powered by [`create-svelte`](https://github.com/sveltejs/kit/tree/main/packages/create-svelte).

Read more about creating a library [in the docs](https://svelte.dev/docs/kit/packaging).

## Creating a project

If you're seeing this, you've probably already done this step. Congrats!

```bash
# create a new project in the current directory
npx sv create

# create a new project in my-app
npx sv create my-app
```

## Developing

Once you've created a project and installed dependencies with `npm install` (or `pnpm install` or `yarn`), start a development server:

```bash
npm run dev

# or start the server and open the app in a new browser tab
npm run dev -- --open
```

Everything inside `src/lib` is part of your library, everything inside `src/routes` can be used as a showcase or preview app.

## Building

To build your library:

```bash
npm run package
```

To create a production version of your showcase app:

```bash
npm run build
```

You can preview the production build with `npm run preview`.

> To deploy your app, you may need to install an [adapter](https://svelte.dev/docs/kit/adapters) for your target environment.

## Publishing

Go into the `package.json` and give your package the desired name through the `"name"` option. Also consider adding a `"license"` field and point it to a `LICENSE` file which you can create from a template (one popular option is the [MIT license](https://opensource.org/license/mit/)).

To publish your library to [npm](https://www.npmjs.com):

```bash
npm publish
```

================
File: src/app.d.ts
================
// See https://svelte.dev/docs/kit/types#app.d.ts
// for information about these interfaces
declare global {
	namespace App {
		// interface Error {}
		// interface Locals {}
		// interface PageData {}
		// interface PageState {}
		// interface Platform {}
	}
}

export {};

================
File: src/app.html
================
<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" href="%sveltekit.assets%/favicon.png" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		%sveltekit.head%
	</head>
	<body data-sveltekit-preload-data="hover">
		<div>%sveltekit.body%</div>
	</body>
</html>

================
File: src/lib/CollapsibleSidebar.svelte
================
<script lang="ts">
	let {
		side = 'left',
		minSize = 150,
		maxSize = 800,
		startSize = 300,
		currentSize = $bindable(startSize),
		isCollapsed = $bindable(false),
		collapsedSize = 40,
		title = '',
		children,
	} = $props();

	let sidebarElement: HTMLElement;
	const isVertical = side === 'left' || side === 'right';

	function initResize(event: MouseEvent) {
		event.preventDefault();

		const startPos = isVertical ? event.pageX : event.pageY;
		const startSize = isVertical ? sidebarElement.offsetWidth : sidebarElement.offsetHeight;

		function onMouseMove(e: MouseEvent) {
			if (isCollapsed) return;

			const currentPos = isVertical ? e.pageX : e.pageY;
			const size =
				side === 'left' || side === 'top'
					? startSize + (currentPos - startPos)
					: startSize - (currentPos - startPos);

			if (size > minSize && size < maxSize) {
				currentSize = size;
			} else if (size <= minSize) {
				isCollapsed = true;
			}
		}

		function onMouseUp() {
			document.removeEventListener('mousemove', onMouseMove);
			document.removeEventListener('mouseup', onMouseUp);
			document.body.style.cursor = 'default';
		}

		document.addEventListener('mousemove', onMouseMove);
		document.addEventListener('mouseup', onMouseUp);
		document.body.style.cursor = isVertical ? 'col-resize' : 'row-resize';
	}

	$effect(() => {
		if (currentSize <= minSize && !isCollapsed) {
			isCollapsed = true;
		}
	});

	$effect(() => {
		if (isCollapsed && currentSize !== collapsedSize) {
			currentSize = collapsedSize;
		}
	});

	$effect(() => {
		sidebarElement.style[isVertical ? 'width' : 'height'] = currentSize + 'px';
	});
</script>

<aside
	bind:this={sidebarElement}
	class="sidebar bg-surface-100-800-token relative border-surface-500/30 flex flex-col}"
	class:border-r={side === 'left'}
	class:border-l={side === 'right'}
	class:border-t={side === 'bottom'}
	class:border-b={side === 'top'}
>
	<!-- Content container -->
	<div class="overflow-hidden relative flex-1 flex flex-col pr-1" class:hidden={isCollapsed}>
		{@render children?.()}
	</div>

	<!-- Toggle button container - only shown when collapsed -->
	{#if isCollapsed}
		<div class="w-full h-full flex items-center justify-center">
			<button
				class="w-full h-full btn variant-soft rounded-none flex {isVertical
					? 'flex-col'
					: ''} items-center justify-center"
				onclick={() => {
					currentSize = startSize;
					isCollapsed = false;
				}}
				aria-label={`${isCollapsed ? 'Expand' : 'Collapse'} sidebar`}
			>
				{#if title && isVertical}
					<div class="flex flex-col items-center gap-2 h-full justify-center">
						<i
							class="fa-solid {side === 'left'
								? 'fa-chevron-right'
								: side === 'right'
									? 'fa-chevron-left'
									: side === 'top'
										? 'fa-chevron-down'
										: 'fa-chevron-up'}"
						></i>
						<span
							class="font-medium text-xs tracking-wider opacity-60"
							style="writing-mode: vertical-rl; text-orientation: mixed; transform: rotate({side ===
							'right'
								? 0
								: 180}deg);"
						>
							{title}
						</span>
					</div>
				{:else if title}
					<span class="font-medium text-sm opacity-60">{title}</span>
					<i
						class="fa-solid ml-2 {side === 'left'
							? 'fa-chevron-right'
							: side === 'right'
								? 'fa-chevron-left'
								: side === 'top'
									? 'fa-chevron-down'
									: 'fa-chevron-up'}"
					></i>
				{/if}
			</button>
		</div>
	{/if}

	<!-- Resize handle -->
	{#if !isCollapsed}
		<button
			class="absolute {isVertical
				? 'w-1.5 h-full cursor-col-resize'
				: 'w-full h-1.5 cursor-row-resize'} hover:bg-primary-500"
			class:right-0={side === 'left'}
			class:left-0={side === 'right'}
			class:bottom-0={side === 'top'}
			class:top-0={side === 'bottom'}
			aria-label="Resize sidebar"
			onmousedown={initResize}
		>
		</button>
	{/if}
</aside>

================
File: src/lib/index.ts
================
import type { SvelteComponent } from 'svelte';
import CollapsibleSidebar from './CollapsibleSidebar.svelte';

// Export the component with its constructor type
export default CollapsibleSidebar as unknown as typeof SvelteComponent;

================
File: src/routes/+page.svelte
================
<h1>Welcome to your library project</h1>
<p>Create your package using @sveltejs/package and preview/showcase your work with SvelteKit</p>
<p>Visit <a href="https://svelte.dev/docs/kit">svelte.dev/docs/kit</a> to read the documentation</p>

================
File: svelte.config.js
================
import adapter from '@sveltejs/adapter-auto';
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';

/** @type {import('@sveltejs/kit').Config} */
const config = {
	// Consult https://svelte.dev/docs/kit/integrations
	// for more information about preprocessors
	preprocess: vitePreprocess(),

	kit: {
		// adapter-auto only supports some environments, see https://svelte.dev/docs/kit/adapter-auto for a list.
		// If your environment is not supported, or you settled on a specific environment, switch out the adapter.
		// See https://svelte.dev/docs/kit/adapters for more information about adapters.
		adapter: adapter()
	}
};

export default config;

================
File: tsconfig.json
================
{
	"extends": "./.svelte-kit/tsconfig.json",
	"compilerOptions": {
		"allowJs": true,
		"checkJs": true,
		"esModuleInterop": true,
		"forceConsistentCasingInFileNames": true,
		"resolveJsonModule": true,
		"skipLibCheck": true,
		"sourceMap": true,
		"strict": true,
		"module": "NodeNext",
		"moduleResolution": "NodeNext"
	}
}

================
File: vite.config.ts
================
import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig } from 'vite';

export default defineConfig({
	plugins: [sveltekit()]
});
